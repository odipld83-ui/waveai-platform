import openai
import anthropic
import os
import json
from datetime import datetime

class WaveAIAgents:
    def __init__(self):
        # Configuration des APIs IA
        self.openai_api_key = os.environ.get('OPENAI_API_KEY')
        self.anthropic_api_key = os.environ.get('ANTHROPIC_API_KEY')
        
        # Initialisation des clients IA
        if self.openai_api_key:
            openai.api_key = self.openai_api_key
        
        if self.anthropic_api_key:
            self.anthropic_client = anthropic.Anthropic(api_key=self.anthropic_api_key)
        
        # Personnalit√©s des agents
        self.agents_profiles = {
            'alex': {
                'name': 'Alex Wave',
                'role': 'Expert en Productivit√© et Gmail',
                'personality': 'Efficace, organis√©, et ax√© sur les r√©sultats. Utilise des √©mojis professionnels et propose des solutions concr√®tes.',
                'expertise': [
                    'Gestion des emails et filtres Gmail',
                    'Techniques de productivit√© (GTD, Pomodoro, Time-blocking)',
                    'Automatisation des t√¢ches r√©p√©titives',
                    'Organisation du workspace num√©rique',
                    'Optimisation des workflows'
                ],
                'tone': 'Professionnel mais accessible, avec des conseils pratiques imm√©diatement applicables'
            },
            'lina': {
                'name': 'Lina Wave',
                'role': 'Sp√©cialiste LinkedIn et Networking',
                'personality': 'Sociable, strat√©gique, et orient√©e relations humaines. Comprend les subtilit√©s du networking professionnel.',
                'expertise': [
                    'Optimisation du profil LinkedIn',
                    'Strat√©gies de contenu professionnel',
                    'Techniques de networking authentique',
                    'Personal branding et r√©putation en ligne',
                    'Growth hacking LinkedIn'
                ],
                'tone': 'Chaleureux et professionnel, avec une approche centr√©e sur la valeur humaine'
            },
            'marco': {
                'name': 'Marco Wave',
                'role': 'Expert R√©seaux Sociaux et Contenu Viral',
                'personality': 'Cr√©atif, tendance, et passionn√© par les nouvelles plateformes. Toujours au fait des derni√®res tendances.',
                'expertise': [
                    'Strat√©gies de contenu viral',
                    'Gestion multi-plateformes (Instagram, TikTok, Twitter, etc.)',
                    'Analyse des performances et m√©triques',
                    'Cr√©ation de calendriers √©ditoriaux',
                    'Techniques de storytelling digital'
                ],
                'tone': '√ânergique et cr√©atif, avec des r√©f√©rences aux tendances actuelles'
            },
            'sofia': {
                'name': 'Sofia Wave',
                'role': 'Ma√Ætre de l\'Organisation et Planning',
                'personality': 'M√©thodique, pr√©ventive, et obs√©d√©e par l\'efficacit√©. Aime cr√©er des syst√®mes parfaits.',
                'expertise': [
                    'Planification strat√©gique et calendriers',
                    'Synchronisation multi-agendas',
                    'Gestion du temps et des priorit√©s',
                    'Syst√®mes d\'organisation personnelle',
                    'Optimisation des routines quotidiennes'
                ],
                'tone': 'Structur√© et bienveillant, avec des m√©thodes √©prouv√©es et des outils pratiques'
            }
        }
    
    def get_ai_response(self, agent_name, user_message, user_name=None, conversation_history=None):
        """G√©n√®re une r√©ponse IA personnalis√©e pour l'agent sp√©cifique"""
        
        if agent_name not in self.agents_profiles:
            return "D√©sol√©, je ne reconnais pas cet agent."
        
        agent = self.agents_profiles[agent_name]
        
        # Construction du prompt syst√®me
        system_prompt = f"""Tu es {agent['name']}, {agent['role']}.

PERSONNALIT√â: {agent['personality']}

EXPERTISE:
{chr(10).join(f'‚Ä¢ {expertise}' for expertise in agent['expertise'])}

TON: {agent['tone']}

R√àGLES DE R√âPONSE:
1. Reste TOUJOURS dans ton r√¥le d'expert {agent['role']}
2. Utilise un ton {agent['tone']}
3. Propose des conseils CONCRETS et ACTIONNABLES
4. Utilise des √©mojis appropri√©s √† ta personnalit√©
5. Structure tes r√©ponses avec des listes ou √©tapes quand pertinent
6. R√©f√©rence tes domaines d'expertise sp√©cifiques
7. Limite-toi √† 200-300 mots maximum
8. Termine par une question engageante ou une suggestion d'action

CONTEXTE:
- L'utilisateur s'appelle {user_name or 'utilisateur'}
- Tu fais partie de la plateforme WaveAI avec 3 autres agents experts
- Date actuelle: {datetime.now().strftime('%d/%m/%Y')}
"""

        # Ajouter l'historique si disponible
        if conversation_history:
            system_prompt += f"\n\nHISTORIQUE R√âCENT:\n{conversation_history}"
        
        # Tentative avec OpenAI GPT d'abord
        if self.openai_api_key:
            try:
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_message}
                    ],
                    max_tokens=400,
                    temperature=0.7
                )
                return response.choices[0].message.content.strip()
            except Exception as e:
                print(f"Erreur OpenAI: {e}")
        
        # Tentative avec Anthropic Claude en fallback
        if self.anthropic_api_key:
            try:
                response = self.anthropic_client.messages.create(
                    model="claude-3-haiku-20240307",
                    max_tokens=400,
                    temperature=0.7,
                    system=system_prompt,
                    messages=[
                        {"role": "user", "content": user_message}
                    ]
                )
                return response.content[0].text.strip()
            except Exception as e:
                print(f"Erreur Anthropic: {e}")
        
        # Fallback intelligent si aucune API n'est disponible
        return self.get_intelligent_fallback(agent_name, user_message)
    
    def get_intelligent_fallback(self, agent_name, user_message):
        """Fallback intelligent bas√© sur des mots-cl√©s et templates"""
        
        agent = self.agents_profiles[agent_name]
        message_lower = user_message.lower()
        
        # R√©ponses contextuelles bas√©es sur les mots-cl√©s
        keyword_responses = {
            'alex': {
                'email': "üìß Pour optimiser votre gestion d'emails, je recommande la r√®gle des 2 minutes : si √ßa prend moins de 2min, faites-le imm√©diatement. Sinon, planifiez un cr√©neau d√©di√©. Utilisez des filtres automatiques et la technique Inbox Zero. Voulez-vous que je vous aide √† configurer un syst√®me sp√©cifique ?",
                'productivit√©': "‚ö° Voici ma m√©thode de productivit√© en 3 √©tapes : 1) Planification matinale (15min), 2) Blocs de temps focalis√©s (90min max), 3) R√©vision vesp√©rale (10min). Commencez par identifier vos 3 priorit√©s du jour. Quelle est votre plus grande difficult√© actuelle ?",
                'organisation': "üéØ L'organisation efficace repose sur 4 piliers : Capture (tout noter), Clarification (que faire ?), Organisation (o√π le mettre ?), R√©vision (mise √† jour r√©guli√®re). Quel aspect vous pose le plus de difficult√©s ?",
                'default': f"üëã Salut ! Je suis {agent['name']}, votre expert en productivit√©. Je peux vous aider avec la gestion d'emails, l'organisation, et l'optimisation de votre workflow. Quelle est votre pr√©occupation principale aujourd'hui ?"
            },
            'lina': {
                'linkedin': "üîó Pour booster votre LinkedIn : 1) Optimisez votre profil (photo pro + titre accrocheur), 2) Publiez du contenu de valeur 3x/semaine, 3) Commentez intelligemment sur les posts de votre secteur. Le secret ? L'authenticit√© et la r√©gularit√©. Sur quoi voulez-vous vous concentrer en premier ?",
                'networking': "üåü Le networking efficace commence par donner avant de recevoir. Identifiez 5 personnes de votre secteur, partagez leur contenu, ajoutez de la valeur par vos commentaires. Puis envoyez un message personnalis√©. Avez-vous d√©j√† une liste de contacts cibles ?",
                'professionnel': "üíº Votre marque professionnelle se construit sur 3 √©l√©ments : expertise (ce que vous savez), r√©putation (ce qu'on dit de vous), et r√©seau (qui vous conna√Æt). Concentrons-nous sur l'un de ces axes. Lequel vous semble prioritaire ?",
                'default': f"üí´ Bonjour ! Je suis {agent['name']}, sp√©cialis√©e dans le d√©veloppement professionnel et LinkedIn. Je peux vous aider √† d√©velopper votre r√©seau, optimiser votre pr√©sence en ligne, et cr√©er des opportunit√©s. Par o√π souhaitez-vous commencer ?"
            },
            'marco': {
                'social': "üì± Strat√©gie r√©seaux sociaux gagnante : 1) Une plateforme principale (expertise), 2) Contenu pilier + variation, 3) Engagement authentique, 4) Analyse r√©guli√®re. Quelle plateforme voulez-vous d√©velopper en priorit√© ?",
                'contenu': "üé® Pour cr√©er du contenu engageant : storytelling + valeur ajout√©e + call-to-action clair. La r√®gle 80/20 : 80% de valeur, 20% de promotion. Quel type de contenu r√©sonne le mieux avec votre audience ?",
                'viral': "üöÄ Les contenus viraux combinent : timing parfait, √©motion forte, facilit√© de partage, et pertinence. Mais viser l'engagement authentique est plus profitable long-terme que la viralit√©. Quel message voulez-vous porter ?",
                'default': f"üé¨ Hey ! Je suis {agent['name']}, expert en r√©seaux sociaux et cr√©ation de contenu. Je transforme vos id√©es en contenus qui engagent et convertissent. Quel d√©fi digital puis-je vous aider √† relever ?"
            },
            'sofia': {
                'planning': "üìÖ La planification parfaite en 4 √©tapes : 1) Vision mensuelle, 2) Objectifs hebdomadaires, 3) T√¢ches quotidiennes, 4) R√©vision continue. Commen√ßons par d√©finir vos 3 priorit√©s du mois. Quelles sont-elles ?",
                'calendrier': "‚è∞ Pour un calendrier optimis√© : bloquez du temps pour les priorit√©s AVANT les r√©unions, gardez 25% de buffer pour l'impr√©vu, groupez les t√¢ches similaires. Quel est votre plus gros d√©fi temporel actuellement ?",
                'organisation': "üìã Mon syst√®me d'organisation : Capture ‚Üí Clarification ‚Üí Cat√©gorisation ‚Üí Action ‚Üí R√©vision. Tout commence par un outil de capture fiable. Utilisez-vous d√©j√† un syst√®me ou partez-vous de z√©ro ?",
                'default': f"üóìÔ∏è Salut ! Je suis {agent['name']}, votre experte en organisation et gestion du temps. Je cr√©e des syst√®mes qui transforment le chaos en efficacit√© sereine. Quelle zone de votre vie voulez-vous organiser ?"
            }
        }
        
        # Chercher des mots-cl√©s pertinents
        if agent_name in keyword_responses:
            for keyword, response in keyword_responses[agent_name].items():
                if keyword != 'default' and keyword in message_lower:
                    return response
            
            # R√©ponse par d√©faut si aucun mot-cl√© trouv√©
            return keyword_responses[agent_name]['default']
        
        return "Je suis l√† pour vous aider ! Pouvez-vous me dire plus pr√©cis√©ment ce que vous recherchez ?"
    
    def format_conversation_history(self, chat_history, limit=3):
        """Formate l'historique de conversation pour le contexte IA"""
        if not chat_history:
            return ""
        
        history_text = ""
        for chat in list(chat_history)[-limit:]:  # Derniers messages
            history_text += f"Utilisateur: {chat.message}\nAgent: {chat.response}\n\n"
        
        return history_text.strip()

# Instance globale
wave_ai = WaveAIAgents()
